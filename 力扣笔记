#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<math.h>
#include<string.h>
//欲使用随机数srand((unsigned int)time(NULL))，random()函数，需要引如下两个头文件
#include<stdlib.h>
#include<time.h>

////1. 两数之和
//int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
//    int* ret = malloc(8);
//    int i, j;
//    for (i = 0; i < numsSize - 1; i++)
//    {
//        for (j = i + 1; j < numsSize; j++)
//        {
//            if (nums[i] + nums[j] == target) {
//                ret[0] = i;
//                ret[1] = j;
//                break;
//            }
//        }
//
//    }
//    *returnSize = 2;
//    return ret;
//}

////2. 两数相加(未解决!!!）
//
//struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) 
//{
//    int i = 0, j = 0;
//    //while (*(l1 + i))
//    //{
//    //    i++;
//    //}
//    //while (*(l2 + j))
//    //{
//    //    j++;
//    //}
//    int k = 0;
//    int l11 = 0, l22 = 0, l33 = 0;
//    for (i = 0; (l1 + i) != 0; i++)
//    {
//        l11 += (*(l1 + i)) * pow(10, i);
//    }
//    for (j = 0; (l2 + j) != 0; j++)
//    {
//        l22 += (*(l2 + j)) * pow(10, j);
//    }
//    l33 = l11 + l22;
//    struct ListNode* l3;
//    for (k = 0; k; k++)
//    {
//        *(l3 + k) = (l33 / pow(10, k)) % 10;
//    }
//    return l3;
//}
//int main()
//{
//    struct ListNode
//    {
//        int val;
//        struct ListNode* next;
//    };
//    struct ListNode l1={ 2, 4, 3}, l2 ={ 5, 6, 4};
//    struct ListNode* addTwoNumbers(l1,l2);
//    return 0;
//}

////3. 无重复字符的最长子串
//int lengthOfLongestSubstring(char* s)
//{
//    int temp = 0, i = 0, j = 0, sl = 0, n = 0, beg = 0, end = 0;
//    for (i = 0; *(s + i) != '\0'; ++i);
//    sl = i;
//    for (beg = 0; beg < sl; ++beg)
//    {
//        end = sl - 1, temp = sl;
//        for (i = beg; i <= end; ++i)
//        {
//            for (j = i + 1; j <= end; ++j)
//            {
//                if (s[i] == s[j])
//                    break;
//            }
//            if (i == j)
//                end = j;
//            else
//                end = j - 1;
//            if (end - beg + 1 < temp)
//                temp = end - beg + 1;
//        }
//        if (temp > n)
//            n = temp;
//    }
//    return n;
//}
//int main()
// {
//    char ch[] = "abca";
//    printf("%d", lengthOfLongestSubstring(ch));//答案应该是3
//    return 0;
//}

////4. 寻找两个正序数组的中位数
//double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
//    int numsx[2000] = { 0 };
//    int i = 0, j = 0, temp = 0, count = 0;
//    for (i = 0; i < nums1Size; i++)
//    {
//        numsx[i] = *(nums1 + i);
//    }
//    for (i = 0; i < nums2Size; i++)
//    {
//        numsx[nums1Size + i] = *(nums2 + i);
//    }
//    while (count <= nums1Size + nums2Size)
//    {
//        for (i = 0; i < nums1Size + nums2Size - 1; i++)
//        {
//            j = i + 1;
//            if (numsx[i] > numsx[j])
//            {
//                temp = numsx[j];
//                numsx[j] = numsx[i];
//                numsx[i] = temp;
//            }
//        }
//        count++;
//    }
//    int sz = nums1Size + nums2Size;
//    if (sz % 2 == 0)
//        return (numsx[(sz/2)-1] + numsx[(sz/2)])/2.0;
//    else
//        return numsx[sz / 2];
//}
//int main()
//{
//    int nums1[] = {1,2};
//    int nums2[] = {3,4};
//    printf("%lf",findMedianSortedArrays(nums1, 2, nums2, 2));
//    return 0;
//}
